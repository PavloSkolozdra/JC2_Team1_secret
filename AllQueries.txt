Library

Create Application for managing library work.
All users should be able
1.	Get information about all books
SELECT * FROM library.books;

2.	Check if needed book is available
# Step1: Check if book exists in library:
SELECT CASE WHEN EXISTS(SELECT * FROM library.books WHERE title = "Spring in Action") THEN true ELSE false END;
# Step2: Check is needed book exists is books_copies with status 2 (AVAILABLE):
SELECT CASE WHEN EXISTS(SELECT * FROM library.books_copies WHERE book_id = 6 AND `status` = 2) THEN true ELSE false END;

3.	Find books by author (main author, co-author)
# Step 1: Find authors id from "authors":
SELECT id FROM library.authors WHERE library.authors.first_name = "Tim" AND library.authors.last_name = "Peierls";

# Step 2: Select book_id from books_authors where author_id = previous SQL result:
SELECT book_id FROM library.books_authors WHERE author_id = 6;

# Step 3: Select book by book_id:
SELECT * FROM library.books WHERE id = 3;

#3.	Find books by co-author

----------//------------ SAME as previous

4.	Find book by title
SELECT * FROM library.books WHERE title = "Java Concurrency in Practice";

5.	Get the most popular and the most unpopular books in selected period
#¹5.	Get the most popular
SELECT 
    title, `year`
FROM
    books
WHERE
    books.id = (SELECT 
            orders.book_id
        FROM
            orders
        WHERE
            order_date BETWEEN '2021-02-02' AND '2021-03-05'
        GROUP BY orders.book_id
        ORDER BY COUNT(orders.book_id) DESC
        LIMIT 1);

#¹5.	Get the most unpopular

SELECT 
    title, `year`
FROM
    books
WHERE
    books.id = (SELECT 
            orders.book_id
        FROM
            orders
        WHERE
            order_date BETWEEN '2021-02-02' AND '2021-03-05'
        GROUP BY orders.book_id
        ORDER BY COUNT(orders.book_id)
        LIMIT 1);
        
6.	*Registration functionality
7.	*Log in
--------------------------------------------------------------------------------------
Reader should be able
1.	Request needed book

select books.id, books_copies.id, books.title, books_copies_statuses.status
from books
join books_copies on books.id = books_copies.book_id
join library.books_copies_statuses on(books_copies.status_id = books_copies_statuses.id)
where books.title = 'Java: A Beginner’s Guide ' and books_copies.status_id = (select id from books_copies_statuses where status = 'AVAILABLE')
order by books.id;

INSERT INTO `library`.`orders` (`user_id`, `book_id`, `order_date`) VALUES ('12', '4', curdate());
2.	Return book
UPDATE `library`.`orders` SET `return_date` = curdate(), `order_status_id` = '3' WHERE (`id` = '5') and (`order_status_id` = '2') and (`user_id` = '12');
UPDATE `library`.`books_copies` SET `status_id` = '1' WHERE (`id` = '24') and (`book_id` = '4') and (`status_id` = '2');
3.	Get his/her statistics (how many and how long books were been read, reading now)

4.	Get the most popular and the most unpopular books in selected period

5.	*Get notification on email
--------------------------------------------------------------------------------------
Manager should be able
1.	Register book with copies

2.	Update book’ information

3.	Delete One copy/Book with all copies

4.	Give book to Reader

5.	Set title of book and display count of this Book’ copies with information about them (available/unavailable in Library)

6.	Get statistics by Reader (books which this user has read, is reading, how long he is our client)

7.	Get statistics by Book (general, by copies, average time of reading)

8.	Get statistics by Readers (average age, time of working with Library, average number of requests to Library in selected period)
SELECT * FROM library.users;
select AVG(age) as average_user_age, AVG(datediff(curdate(), registration_date)) as time_with_library
from users, orders
where users.user_role_id = (select users_roles.id from users_roles where users_roles.role = 'READER')

select count(*) / 30 as average_requests_per_month
from orders
where user_id in (select id from users where user_role_id = (select id from users_roles where users_roles.role = 'READER'))

9.	Get list of users who has not returned book in time with detailed information about them

10.	How many books were giving in selected period?
select count(*)
from orders 
where order_status_id in (select orders_statuses.id from orders_statuses where orders_statuses.status = 'PROCESSED' or orders_statuses.status = 'CLOUSED') and processed_date between curdate()-30 and curdate();
11.	*Send notification to one reader, all reader
--------------------------------------------------------------------------------------

