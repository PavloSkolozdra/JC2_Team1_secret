Library

Create Application for managing library work.
All users should be able
1.	Get information about all books
SELECT * FROM library.books;

2.	Check if needed book is available
# Step1: Check if book exists in library:
SELECT CASE WHEN EXISTS(SELECT * FROM library.books WHERE title = "Spring in Action") THEN true ELSE false END;
# Step2: Check is needed book exists is books_copies with status 2 (AVAILABLE):
SELECT CASE WHEN EXISTS(SELECT * FROM library.books_copies WHERE book_id = 6 AND `status` = 2) THEN true ELSE false END;

3.	Find books by author (main author, co-author)
# Step 1: Find authors id from "authors":
SELECT id FROM library.authors WHERE library.authors.first_name = "Tim" AND library.authors.last_name = "Peierls";

# Step 2: Select book_id from books_authors where author_id = previous SQL result:
SELECT book_id FROM library.books_authors WHERE author_id = 6;

# Step 3: Select book by book_id:
SELECT * FROM library.books WHERE id = 3;

#3.	Find books by co-author

----------//------------ SAME as previous

4.	Find book by title
SELECT * FROM library.books WHERE title = "Java Concurrency in Practice";

5.	Get the most popular and the most unpopular books in selected period
#¹5.	Get the most popular
SELECT 
    title, `year`
FROM
    books
WHERE
    books.id = (SELECT 
            orders.book_id
        FROM
            orders
        WHERE
            order_date BETWEEN '2021-02-02' AND '2021-03-05'
        GROUP BY orders.book_id
        ORDER BY COUNT(orders.book_id) DESC
        LIMIT 1);

#¹5.	Get the most unpopular

SELECT 
    title, `year`
FROM
    books
WHERE
    books.id = (SELECT 
            orders.book_id
        FROM
            orders
        WHERE
            order_date BETWEEN '2021-02-02' AND '2021-03-05'
        GROUP BY orders.book_id
        ORDER BY COUNT(orders.book_id)
        LIMIT 1);
        
6.	*Registration functionality
7.	*Log in
--------------------------------------------------------------------------------------
Reader should be able
1.	Request needed book

select books.id, books_copies.id, books.title, books_copies_statuses.status
from books
join books_copies on books.id = books_copies.book_id
join library.books_copies_statuses on(books_copies.status_id = books_copies_statuses.id)
where books.title = 'Java: A Beginner’s Guide ' and books_copies.status_id = (select id from books_copies_statuses where status = 'AVAILABLE')
order by books.id;

INSERT INTO `library`.`orders` (`user_id`, `book_id`, `order_date`) VALUES ('12', '4', curdate());
2.	Return book
UPDATE `library`.`orders` SET `return_date` = curdate(), `order_status_id` = '3' WHERE (`id` = '5') and (`order_status_id` = '2') and (`user_id` = '12');
UPDATE `library`.`books_copies` SET `status_id` = '1' WHERE (`id` = '24') and (`book_id` = '4') and (`status_id` = '2');
3.	Get his/her statistics (how many and how long books were been read, reading now)

SELECT username, book.title, book.author, DATEDIFF(return_date, order_date) AS `days read` FROM library.orders 
JOIN users ON(orders.user_id = users.id)
JOIN book ON(orders.book_id = book.id)
WHERE user_id=5;

#how long book been read
SELECT  book.title, order_status_id, DATEDIFF(return_date, processed_date) FROM library_v2.orders
JOIN book ON (book_id = book.id)
WHERE user_id = 4 AND order_status_id =3;

#how many books been read / how many books reading now
SELECT  book.title FROM library_v2.orders
JOIN book ON (book_id = book.id)
WHERE user_id = 4 AND order_status_id =2;

4.	Get the most popular and the most unpopular books in selected period

SELECT book.title FROM book WHERE book.id = ( SELECT orders.book_id FROM orders WHERE processed_date BETWEEN "2021-09-01" AND "2021-09-1=20" GROUP BY orders.book_id ORDER BY COUNT(orders.book_id) DESC LIMIT 1);

5.	*Get notification on email
--------------------------------------------------------------------------------------
Manager should be able
1.	Register book with copies

step 1 ______

first checkout of table 'author' if this author present go to step 4 if not go tu step 2 and add author

SELECT *
    FROM authors
       WHERE first_name='Joshua' and last_name = 'Bloch';

step 2____
add author

INSERT INTO authors (first_name,last_name,)
VALUES 
('first_name','last_name');


step 3_____

add book 
INSERT INTO books (title,year)
VALUES 
('title','year');


step 4 ___ 
add book with author 

INSERT INTO books_authors (book_id,author_id,author_role_id)
VALUES 
('book_id','author_id','author_role_id');

step 5 ____
add copies book

INSERT INTO books_copies (book_id,status)
VALUES 
('book_id','status');

2.	Update book’ information
UPDATE book
SET 
	title ="Update",
	year  = "Update"
WHERE id = "5";

or 

UPDATE books_authors
SET 
	author_id ="Update",
	author_role_id = "Update"
WHERE book_id = "5";

3.	Delete One copy/Book with all copies

first choose a copy which status  AVAILABLE
SELECT *
    FROM books_copies
       WHERE book_id = '' and status = '2' ;

next mark like deleted
 
UPDATE bookbooks_copies
SET 
	status = '3'
WHERE id = '';

/*****************************************************************************************


#3.1 Delete  Book with all copies



 
UPDATE bookbooks_copies
SET 
	status = '3'
WHERE status = '2';(AVAILABLE)

4.	Give book to Reader
first checkout of table 'order' with status  PROCESSED and next  such a client is a debtor if yes make order status REJECTED 

SELECT *
    FROM orders
       WHERE user_id = '' and order_status_id= 'PROCESSED';

next look  due_date if due_date > CURRENT_DATE() ;

UPDATE orders
SET 
	order_status_id = '4'(REJECTED)
WHERE id = '';

if don'n debt go to table books _ copy and find copy with status AVAILABLE


SELECT * FROM library.books_copies
where 
order_status_id = '2'(AVAILABLE);

if there is no free to inform the author how long to wait 


SELECT * FROM library.orders
where 
book_id = '1' and return_date<return_date;

if free

UPDATE orders
SET 

    processed_date= 'CURRENT_DATE() ',
    due_date=' ADDDATE(CURRENT_DATE(), INTERVAL +60 DAY)',
    book_copy_id='bool_copy',
    order_status_id = '2'(PROCESSED)
WHERE id = 'id';


UPDATE books_copies
SET 
  status = 'ISSUED' ;
WHERE id = 'id';
5.	Set title of book and display count of this Book’ copies with information about them (available/unavailable in Library)

6.	Get statistics by Reader (books which this user has read, is reading, how long he is our client)

7.	Get statistics by Book (general, by copies, average time of reading)

8.	Get statistics by Readers (average age, time of working with Library, average number of requests to Library in selected period)
SELECT * FROM library.users;
select AVG(age) as average_user_age, AVG(datediff(curdate(), registration_date)) as time_with_library
from users, orders
where users.user_role_id = (select users_roles.id from users_roles where users_roles.role = 'READER')

select count(*) / 30 as average_requests_per_month
from orders
where user_id in (select id from users where user_role_id = (select id from users_roles where users_roles.role = 'READER'))

9.	Get list of users who has not returned book in time with detailed information about them

10.	How many books were giving in selected period?
select count(*)
from orders 
where order_status_id in (select orders_statuses.id from orders_statuses where orders_statuses.status = 'PROCESSED' or orders_statuses.status = 'CLOUSED') and processed_date between curdate()-30 and curdate();
11.	*Send notification to one reader, all reader
--------------------------------------------------------------------------------------

